service: schema

provider:
    name: aws
    stage: prod
    region: ap-southeast-2
    profile: profile
  
  resources:
    Resources:
      LambdaRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /
          RoleName: LambdaRole-${sls:stage}
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          Policies:
            - PolicyName: LambdaPolicies
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - "Fn::Join":
                          - ":"
                          - - "arn:aws:logs"
                            - Ref: "AWS::Region"
                            - Ref: "AWS::AccountId"
                            - "log-group:/aws/lambda/*:*:*"
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref": "ServerlessDeploymentBucket"
                  - Effect: "Allow"
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:UpdateTable
                      - dynamodb:UpdateTimeToLive
                      - dynamodb:DescribeTimeToLive
                    Resource:
                      - Fn::Join:
                          - ":"
                          - - "arn:aws:dynamodb"
                            - Ref: "AWS::Region"
                            - Ref: "AWS::AccountId"
                            - "table/*"
    Outputs:
      LambdaRoleArn:
        Value: !GetAtt [LambdaRole, Arn]
  
